on: push

jobs:
  check:
    # The latest virtual environment to have Xcode 11.
    runs-on: macOS-11

    env:
      LOCALIZATION_OUT: Build/Localizations

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Select Xcode 11.7
        run: sudo xcode-select --switch /Applications/Xcode_11.7.app

      - name: Set up Ruby and install Bundler dependencies using cache
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Set up Node for GitHub-style-generator and install npm dependencies using cache
        uses: actions/setup-node@v3
        with:
          node-version-file: Tools/GitHub-style-generator/.nvmrc
          cache: npm
          cache-dependency-path: Tools/GitHub-style-generator/package-lock.json

      - name: Use cache for CocoaPods dependencies
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: bundle exec pod install

      - name: Build peg-markdown-highlight
        run: make -C Dependency/peg-markdown-highlight

          # TODO restore xcpretty
      - name: Run tests
        run: |
          set -o pipefail
          xcodebuild -workspace MacDown.xcworkspace -scheme MacDown test

      - name: Export localizations
        run: xcodebuild -exportLocalizations -localizationPath "$LOCALIZATION_OUT"

      - name: Set up code signing
        run: bundle exec fastlane certificates
        env:
          MACDOWN_MATCH_REPOSITORY_ACCESS_TOKEN: ${{ secrets.MATCH_REPOSITORY_ACCESS_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_REPOSITORY_PASSWORD }}

      - name: Build a release
        run: bundle exec fastlane build_release

      # The zipping done by the upload-artifact action isn’t sufficient – macOS
      # refused to run the app bundle that I extracted from its zip. I think
      # this is, possibly amongst other reasons, because it doesn’t preserve
      # executable permissions. So I’ve instead copied the usage of the ditto
      # command from
      # https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow.
      - name: Zip the app bundle
        run: |
          cd release
          /usr/bin/ditto -c -k --keepParent MacDown.app MacDown.zip
          rm -rf MacDown.app

      - name: Save release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release
